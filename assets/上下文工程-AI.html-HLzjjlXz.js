import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as a,o as n}from"./app-LXH6WUFq.js";const e={};function l(h,s){return n(),t("div",null,[...s[0]||(s[0]=[a(`<h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><p><strong>上下文工程</strong> vs <strong>提示工程</strong>：</p><table><thead><tr><th>维度</th><th>提示工程</th><th>上下文工程</th></tr></thead><tbody><tr><td>焦点</td><td>单次查询的指令优化</td><td>整个对话状态管理</td></tr><tr><td>使用者</td><td>普通用户、开发者</td><td>AI智能体开发人员</td></tr><tr><td>范围</td><td>当前输入</td><td>系统指令+工具+外部数据+历史消息</td></tr></tbody></table><p><strong>定义</strong>：上下文工程是通过优化LLM可用的整体标记集，克服模型固有约束，持续实现期望结果的技术。</p><h2 id="有效上下文的关键要素" tabindex="-1"><a class="header-anchor" href="#有效上下文的关键要素"><span>有效上下文的关键要素</span></a></h2><h3 id="_1-结构化系统提示" tabindex="-1"><a class="header-anchor" href="#_1-结构化系统提示"><span>1. 结构化系统提示</span></a></h3><p><strong>最佳实践</strong>：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">system_prompt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">role</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;你是一个专业的编程助手&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">role</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">background</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    用户正在开发一个Web应用项目，技术栈包括React和Node.js</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">background</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">instructions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    1. 提供简洁明了的代码示例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    2. 解释关键概念但避免冗长</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    3. 当不确定时主动询问澄清</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">instructions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tools</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    可使用代码分析、文档查询等功能</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tools</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">system_prompt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-精简工具集设计" tabindex="-1"><a class="header-anchor" href="#_2-精简工具集设计"><span>2. 精简工具集设计</span></a></h3><p><strong>问题</strong>：工具过多导致选择困难<br><strong>解决方案</strong>：MVP工具原则</p><ul><li>合并相似功能工具</li><li>确保每个工具意图明确</li><li>参数设计无歧义</li></ul><h3 id="_3-少样本提示优化" tabindex="-1"><a class="header-anchor" href="#_3-少样本提示优化"><span>3. 少样本提示优化</span></a></h3><p><strong>错误做法</strong>：塞满各种边缘案例<br><strong>正确做法</strong>：选择多样化、规范化的代表性示例</p><h2 id="上下文检索策略" tabindex="-1"><a class="header-anchor" href="#上下文检索策略"><span>上下文检索策略</span></a></h2><h3 id="混合检索模型" tabindex="-1"><a class="header-anchor" href="#混合检索模型"><span>混合检索模型</span></a></h3><p><strong>实例</strong>：Claude Code智能体</p><ul><li><strong>静态上下文</strong>：CLAUDE.md文件直接预加载</li><li><strong>动态检索</strong>：使用glob、grep等原语实时查找文件</li><li><strong>优势</strong>：避免陈旧索引，适应变化环境</li></ul><h2 id="长时程任务管理" tabindex="-1"><a class="header-anchor" href="#长时程任务管理"><span>长时程任务管理</span></a></h2><h3 id="_1-上下文压缩" tabindex="-1"><a class="header-anchor" href="#_1-上下文压缩"><span>1. 上下文压缩</span></a></h3><p><strong>适用场景</strong>：对话接近上下文窗口限制<br><strong>流程</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>长对话 → 模型自我总结 → 新上下文窗口初始化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>关键</strong>：高保真提炼核心信息，最小化性能损失</p><h3 id="_2-结构化笔记记录" tabindex="-1"><a class="header-anchor" href="#_2-结构化笔记记录"><span>2. 结构化笔记记录</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 伪代码示例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> 处理长任务</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 任务未完成:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        执行工作</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        关键笔记 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> 提取核心信息</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        保存到外部存储</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(关键笔记)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 上下文外存储</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        如果需要: </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">从外部存储加载历史笔记</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-子智能体架构" tabindex="-1"><a class="header-anchor" href="#_3-子智能体架构"><span>3. 子智能体架构</span></a></h3><p><strong>分工模式</strong>：</p><ul><li><strong>主Agent</strong>：高层规划协调（100-500 token）</li><li><strong>子Agent</strong>：深度技术工作（10000+ token）</li><li><strong>输出</strong>：精炼摘要（1000-2000 token）</li></ul><h2 id="技术选型指南" tabindex="-1"><a class="header-anchor" href="#技术选型指南"><span>技术选型指南</span></a></h2><table><thead><tr><th>任务类型</th><th>推荐技术</th><th>理由</th></tr></thead><tbody><tr><td>对话流</td><td>压缩</td><td>保持对话连贯性</td></tr><tr><td>迭代开发</td><td>结构化笔记</td><td>明确里程碑管理</td></tr><tr><td>复杂研究</td><td>多Agent</td><td>分工协作，深度探索</td></tr><tr><td>代码开发</td><td>混合检索</td><td>平衡效率与实时性</td></tr></tbody></table><h2 id="核心原则" tabindex="-1"><a class="header-anchor" href="#核心原则"><span>核心原则</span></a></h2><ol><li><strong>最小化原则</strong>：找到最小的高信号标记集</li><li><strong>动态性原则</strong>：根据任务进展调整上下文内容</li><li><strong>实用性原则</strong>：技术选择以实际效果为导向</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>上下文工程代表了LLM使用方式的根本转变：从单次提示优化转向全生命周期状态管理。随着模型能力提升，关键在于精心管理有限注意力预算内的信息，通过合理的上下文设计最大化期望结果的概率。</p><hr>`,34)])])}const p=i(e,[["render",l]]),k=JSON.parse('{"path":"/blogs/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%B7%A5%E7%A8%8B-AI.html","title":"上下文工程-AI","lang":"zh-CN","frontmatter":{"title":"上下文工程-AI","date":"2025-10-14T00:00:00.000Z","category":"博客","description":"核心概念 上下文工程 vs 提示工程： 定义：上下文工程是通过优化LLM可用的整体标记集，克服模型固有约束，持续实现期望结果的技术。 有效上下文的关键要素 1. 结构化系统提示 最佳实践： 2. 精简工具集设计 问题：工具过多导致选择困难 解决方案：MVP工具原则 合并相似功能工具 确保每个工具意图明确 参数设计无歧义 3. 少样本提示优化 错误做法：...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"上下文工程-AI\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-16T09:12:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"guoziyue-seeker\\",\\"url\\":\\"https://github.com/guoziyue-seeker\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/llm-guide/blogs/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%B7%A5%E7%A8%8B-AI.html"}],["meta",{"property":"og:site_name","content":"LLMGuide"}],["meta",{"property":"og:title","content":"上下文工程-AI"}],["meta",{"property":"og:description","content":"核心概念 上下文工程 vs 提示工程： 定义：上下文工程是通过优化LLM可用的整体标记集，克服模型固有约束，持续实现期望结果的技术。 有效上下文的关键要素 1. 结构化系统提示 最佳实践： 2. 精简工具集设计 问题：工具过多导致选择困难 解决方案：MVP工具原则 合并相似功能工具 确保每个工具意图明确 参数设计无歧义 3. 少样本提示优化 错误做法：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-16T09:12:43.000Z"}],["meta",{"property":"article:published_time","content":"2025-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-16T09:12:43.000Z"}]]},"git":{"createdTime":1760454711000,"updatedTime":1760605963000,"contributors":[{"name":"guoziyue666","username":"guoziyue666","email":"2567047574@qq.com","commits":2,"url":"https://github.com/guoziyue666"}]},"readingTime":{"minutes":2.68,"words":803},"filePathRelative":"blogs/上下文工程-AI.md","excerpt":"<h2>核心概念</h2>\\n<p><strong>上下文工程</strong> vs <strong>提示工程</strong>：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>维度</th>\\n<th>提示工程</th>\\n<th>上下文工程</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>焦点</td>\\n<td>单次查询的指令优化</td>\\n<td>整个对话状态管理</td>\\n</tr>\\n<tr>\\n<td>使用者</td>\\n<td>普通用户、开发者</td>\\n<td>AI智能体开发人员</td>\\n</tr>\\n<tr>\\n<td>范围</td>\\n<td>当前输入</td>\\n<td>系统指令+工具+外部数据+历史消息</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{p as comp,k as data};
